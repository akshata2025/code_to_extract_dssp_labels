# -*- coding: utf-8 -*-
"""code_extract_dssp_to_csv.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uj1LRBH1BtcSkd-ECuIRN0jDhgSkYlUc

Code to extract dssp8 and dssp3 labels from PDB ID and saved into .csv file:
"""

# !pip install biopython

# from IPython import get_ipython
# from IPython.display import display

# ## Install DSSP (mkdssp) on your system ###

# !sudo apt-get update
# !sudo apt-get install dssp

"""**Extracting and Converting dssp8 secondary stucture from PDB to dssp3**

"""

from Bio.PDB import PDBList, PDBParser, DSSP
import csv
import os

def map_dssp8_to_q3(dssp8_char):
    """Map DSSP 8-state character to Q3 (3-state) format."""
    if dssp8_char in ['H', 'G', 'I']:
        return 'H'
    elif dssp8_char in ['E', 'B']:
        return 'E'
    else:
        return 'C'

def get_dssp_info(pdb_id, dssp_exe='mkdssp'):
    """
    Download PDB file, run DSSP, and return primary sequence, DSSP Q8, and Q3.
    """
    pdb_id = pdb_id.lower()
    pdbl = PDBList()
    pdbl.retrieve_pdb_file(pdb_id, pdir='.', file_format='pdb')
    pdb_file = f"pdb{pdb_id}.ent"

    parser = PDBParser()
    structure = parser.get_structure(pdb_id, pdb_file)
    model = structure[0]

    dssp = DSSP(model, pdb_file, file_type='PDB', dssp=dssp_exe)

    dssp_keys = list(dssp.keys())
    primary_sequence = ''.join([dssp[key][1] for key in dssp_keys])
    dssp8_string = ''.join([dssp[key][2] for key in dssp_keys])
    dssp3_string = ''.join([map_dssp8_to_q3(dssp[key][2]) for key in dssp_keys])

    # Optionally delete the .ent file to keep workspace clean
    os.remove(pdb_file)

    return primary_sequence, dssp8_string, dssp3_string

# === CSV Setup ===
csv_filename = "dssp_results.csv"
csv_headers = ["PDB_ID", "Primary_Sequence", "DSSP_Q8", "DSSP_Q3", "Length"]

# Create the CSV and write header
with open(csv_filename, mode='w', newline='') as csv_file:
    writer = csv.writer(csv_file)
    writer.writerow(csv_headers)

    # === INPUT LOOP ===
    print("Enter PDB IDs one by one. Type 'exit' or 'q' to quit.\n")

    while True:
        pdb_id_input = input("Enter PDB ID (e.g., 2dsq): ").strip()

        if pdb_id_input.lower() in ['exit', 'q']:
            print("\n Exiting and saving results to CSV...(saved)\n")
            break

        try:
            primary_seq, dssp8_str, dssp3_str = get_dssp_info(pdb_id_input)

            # Display summary
            print(f"\n Primary sequence for {pdb_id_input} (length={len(primary_seq)}):\n{primary_seq[:60]}...")
            print(f" Q8: {dssp8_str[:60]}...")
            print(f" Q3: {dssp3_str[:60]}...\n")

            # Write to CSV
            writer.writerow([pdb_id_input, primary_seq, dssp8_str, dssp3_str, len(primary_seq)])

        except Exception as e:
            print(f"\n Error processing PDB ID '{pdb_id_input}': {e}\n")

# === AUTO-DOWNLOAD IN COLAB ===
from google.colab import files
files.download(csv_filename)